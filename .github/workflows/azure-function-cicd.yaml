name: Deploy Azure Function Infrastructure

on:
  push:
    branches:
      - dev
  workflow_dispatch:

jobs:
  terraform:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        env: [dev]

    steps:
      # Step 1: Checkout Code
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Show directory structure for debugging
      - name: List terraform folder contents
        run: ls -la terraform/${{ matrix.env }}/infra

      # Step 3: Login to Azure
      - name: Azure Login 
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # Step 4: Export ARM variables for Terraform (auth only)
      - name: Export ARM environment variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      # Step 5: Export TF_VAR variables to match variables.tf exactly
      - name: Export Terraform input variables (TF_VAR_*)
        run: |
          # Match your variables.tf exactly (case-sensitive)
          echo "TF_VAR_AZURE_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ACR_CLIENT_ID=${{ secrets.ACR_CLIENT_ID }}" >> $GITHUB_ENV
          echo "TF_VAR_ACR_CLIENT_SECRET=${{ secrets.ACR_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "TF_VAR_ACR_TENANT_ID=${{ secrets.ACR_TENANT_ID }}" >> $GITHUB_ENV

          # Export any additional TF vars if needed (example for dynamic vars)
          echo "TF_VAR_resource_group_name=${{ secrets.RESOURCE_GROUP_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_storage_account_name=${{ secrets.STORAGE_ACCOUNT_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_function_name=${{ secrets.FUNCTION_NAME }}" >> $GITHUB_ENV
          echo "TF_VAR_function_storage_account=${{ secrets.FUNCTION_STORAGE }}" >> $GITHUB_ENV

      # Step 6: Break Terraform State Lock (optional)
      - name: Break Terraform State Lease
        continue-on-error: true
        run: |
          az storage blob lease break \
            --account-name tfstate147025af \
            --container-name tfstate \
            --blob-name terraform.tfstate \
            --auth-mode login || echo "Skipping lease break (no permission or no lease)"

      # Step 7: Install Terraform
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.7

      # Step 8: Terraform Init
      - name: Terraform Init
        working-directory: terraform/${{ matrix.env }}/infra
        run: terraform init

      # Step 9: Terraform Format Check
      - name: Terraform Format Check
        working-directory: terraform/${{ matrix.env }}/infra
        run: terraform fmt -check

      # Step 10: Terraform Validate
      - name: Terraform Validate
        working-directory: terraform/${{ matrix.env }}/infra
        run: terraform validate

      # Step 11: Apply function infra (first)
      - name: Terraform Apply (Function Infra Only)
        if: ${{ github.ref == format('refs/heads/{0}', matrix.env) }}
        working-directory: terraform/${{ matrix.env }}/infra
        run: |
          terraform apply -auto-approve -var-file=terraform.tfvars \
            -target=azurerm_function_app.func \
            -target=azurerm_app_service_plan.func_plan \
            -target=azurerm_storage_account.func_storage

      # Step 12: Install Azure Functions Core Tools
      - name: Install Azure Functions Core Tools
        run: sudo npm install -g azure-functions-core-tools@4 --unsafe-perm true

      # Step 13: Publish Function App Code
      - name: Publish Azure Function Code
        working-directory: function-code
        run: func azure functionapp publish process-file-func --python

      # Step 14: Apply remaining infra (networks, monitoring, etc.)
      - name: Terraform Apply (Remaining Infra)
        if: ${{ github.ref == format('refs/heads/{0}', matrix.env) }}
        working-directory: terraform/${{ matrix.env }}/infra
        run: terraform apply -auto-approve -var-file=terraform.tfvars

      