name: Deploy Airflow to Azure

on:
  push:
    branches:
      - dev

env:
  IMAGE_NAME: airflow-custom
  IMAGE_TAG: latest_img
  ACR_NAME: acrairflowdevhealthcare
  RESOURCE_GROUP_NAME: healthcare_project
  LOCATION: swedencentral
  PREFIX: airflow
  TF_VAR_tags: '{"project":"airflow"}'
  TF_VAR_environment_variables: '{"AIRFLOW_VAR_ENV":"dev"}'

jobs:
  terraform-deploy:
    name: Terraform Deploy Infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JSON }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.5.7

      - name: Terraform Init
        working-directory: terraform/dev/acr
        run: |
          terraform init \
            -backend-config="storage_account_name=tfstate147025af" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=terraform.tfstate" \
            -backend-config="access_key=${{ secrets.STORAGE_ACCESS_KEY }}"

      - name: Terraform Plan
        working-directory: terraform/dev/acr
        run: |
          terraform plan \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.ACR_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ACR_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ACR_TENANT_ID }}" \
            -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" \
            -var="acr_name=${{ env.ACR_NAME }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="prefix=${{ env.PREFIX }}" \
            -var="acr_sp_username=${{ secrets.ACR_SP_USERNAME }}" \
            -var="acr_sp_password=${{ secrets.ACR_SP_PASSWORD }}" \
            -var="docker_image=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ env.IMAGE_TAG }}" \
            -out=tfplan

      - name: Terraform Apply
        if: github.ref == 'refs/heads/dev'
        working-directory: terraform/dev/acr
        run: terraform apply -input=false tfplan

  docker-build-push:
    name: Build and Push Docker Image
    needs: terraform-deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JSON }}

      - name: ACR Login
        run: |
          az acr login --name ${{ env.ACR_NAME }} \
            --username ${{ secrets.ACR_SP_USERNAME }} \
            --password ${{ secrets.ACR_SP_PASSWORD }}

      - name: Docker Build
        run: docker build -t ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }} .

      - name: Docker Push
        run: docker push ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  terraform-redeploy:
    name: Terraform Re-Apply with New Image
    needs: docker-build-push
    if: github.event.head_commit.message != 'skip-infra'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS_JSON }}

      - name: Terraform Apply (New Image Tag)
        working-directory: terraform/dev/acr
        run: |
          terraform apply -auto-approve \
            -var="subscription_id=${{ secrets.AZURE_SUBSCRIPTION_ID }}" \
            -var="client_id=${{ secrets.ACR_CLIENT_ID }}" \
            -var="client_secret=${{ secrets.ACR_CLIENT_SECRET }}" \
            -var="tenant_id=${{ secrets.ACR_TENANT_ID }}" \
            -var="resource_group_name=${{ env.RESOURCE_GROUP_NAME }}" \
            -var="acr_name=${{ env.ACR_NAME }}" \
            -var="location=${{ env.LOCATION }}" \
            -var="prefix=${{ env.PREFIX }}" \
            -var="acr_sp_username=${{ secrets.ACR_SP_USERNAME }}" \
            -var="acr_sp_password=${{ secrets.ACR_SP_PASSWORD }}" \
            -var="docker_image=${{ env.IMAGE_NAME }}" \
            -var="image_tag=${{ env.IMAGE_TAG }}"